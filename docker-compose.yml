version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: register_app_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/backup:/backups
    ports:
      - "5432:5432"
    networks:
      - register_app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: register_app_backend
    environment:
      NODE_ENV: production
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 8001
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./api/backup:/backups
    networks:
      - register_app_network
    restart: unless-stopped

  frontend:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    container_name: register_app_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - register_app_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  register_app_network:
    driver: bridge 