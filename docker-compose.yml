services:
  frontend:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:80:80"
    depends_on:
      - backend
    networks:
      - register_app_network

  backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:8001:8001"
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PORT=${PORT}
      - ROUNDS=${ROUNDS}
      - JWT_SECRET=${JWT_SECRET}
      - DEFAULT_USER_ACCESS=${DEFAULT_USER_ACCESS}
      - DEFAULT_USER_2=${DEFAULT_USER_2}
      - ADM_SECRET=${ADM_SECRET}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - ENABLE_DAILY_BACKUP=${ENABLE_DAILY_BACKUP}
    depends_on:
      - db
    networks:
      - register_app_network

  db:
    image: postgres:17
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - register_app_network
   
volumes: 
  postgres_data:

networks:
  register_app_network:
    driver: bridge
